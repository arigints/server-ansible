---
- name: Enable EPEL repository
  yum:
    name: epel-release
    state: present
  when: ansible_os_family == "RedHat"

- name: Import ELRepo GPG key
  rpm_key:
    state: present
    key: https://www.elrepo.org/RPM-GPG-KEY-elrepo.org
  when: ansible_os_family == "RedHat"

- name: Install ELRepo
  yum:
    name: "https://www.elrepo.org/elrepo-release-9.el9.elrepo.noarch.rpm"
    state: present
  when: ansible_os_family == "RedHat"

- name: Install WireGuard (CentOS)
  yum:
    update_cache: yes
    name: wireguard-tools
    state: latest
  when: ansible_os_family == "RedHat"

- name: Clone WireGuard Docker Compose repository (Debian)
  git:
    repo: "{{ docker_github_url }}"
    dest: "{{ home_dir }}/server-docker"
    force: yes
  when: ansible_os_family == "Debian"

- name: Copy .env file to the WireGuard Docker Compose directory
  copy:
    src: files/.env
    dest: "{{ home_dir }}/server-docker/wireguard/.env"
  when: ansible_os_family == "Debian"

- name: Check if Docker network exists
  command: docker network ls --filter name=my_shared_network --format '{{ "{{" }} .Name {{ "}}" }}'
  register: existing_network

- name: Create Docker network if not exists
  command: docker network create my_shared_network
  when: existing_network.stdout != 'my_shared_network'

- name: Start WireGuard using Docker Compose (Debian)
  command: docker compose up -d
  args:
    chdir: "{{ home_dir }}/server-docker/wireguard"
  when: ansible_os_family == "Debian"

- name: Wireguard is started and enabled
  service:
    name: wg-quick@wg0
    state: stopped
  when: ansible_os_family == "RedHat"

- name: Write the wireguard client config file
  template:
    src: ./files/wg0.conf
    dest: /etc/wireguard/wg0.conf
  when: ansible_os_family == "RedHat"

- name: Wireguard is started and enabled
  service:
    name: wg-quick@wg0
    state: started
    enabled: true
  when: ansible_os_family == "RedHat"

- name: Ping VPN gateway to check connectivity
  shell: ping -c 2 10.252.1.1
  register: ping_result
  ignore_errors: yes
  when: ansible_os_family == "RedHat"

- name: Display ping results
  debug:
    msg: "{{ item }}"
  loop: "{{ ping_result.stdout_lines }}"
  when: ansible_os_family == "RedHat"